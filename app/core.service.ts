import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';


@Injectable({
  providedIn: 'root'
})
export class CoreService {

  private authToken: string = '';

  constructor(
    private http: HttpClient
  ) {}

  getProxy() {

  }

  /**
   * Set messages, return data.
   * @var Object result Response from Core
   */
  handleResult(result: any, key: string = '') {
    if (result && result.message) {
      console.log(result.message);
      return true;
      // this.messages.message(result.message, key);
    }
    if (result && result.data) {
      return result.data;
    } else {
      return false;
    }
  }

  /**
   * Set error message
   * @param Object error Error object
   */
  handleError(data: any, key: string = '') {
    console.error('error', data);
    return false;
  }

  /**
   * Set authorization token
   * @var String token Token generated by login
   */
  setAuth(token: string) {
    this.authToken = token;
  }

  /**
   * Set headers for http requests
   */
  getConfig() {
    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);
    return { headers };
  }

  /**
   * Format the core URL
   * @param String type API call type, eg. users, courses
   * @param String action API call action, eg get, list
   * @param Number id ID of the {type} resource
   * @param Number Id2 Secondary ID related to the {action}
   *
   * Example usage:
   *  Get a certificate for a user in a course.
   *  this.url('certifictes', 'course', courseId = 60, userId = 3)
   *  /core/certificates/course/60/3
   */
  url(type: string, action: string = '', id: number|null = null, id2: number|null = null) {
    let url = `/core/${type}`;
    if (action) {
      url += `/${action}`;
    }
    if (id) {
      url += `/${id}`;
    }
    if (id2) {
      url += `/${id2}`;
    }
    return url;
  }

  /**
   * http GET request
   *
   * @param String type API call type, eg. users, courses
   * @param String action API call action, eg get, list
   * @param Number id ID of the {type} resource
   * @param Number Id2 Secondary ID related to the {action}
   *
   * @return Promise After handling messages, returns a promise that will resolve data sent back by the API
   */
  get(type: string, action: string = '', id: number|null = null, id2: number|null = null) {
    let url = this.url(type, action, id, id2);
    return this.http.get(url, this.getConfig()).toPromise().then((result: any) => {
      return this.handleResult(result, type);
    }).catch((response: any) => {
      return this.handleError(response.error, type)
    });
  }

  /**
   * http POST request
   *
   * @param String type API call type, eg. users, courses
   * @param String action API call action, eg get, list
   * @param Object payload data to be sent
   *
   * @return Promise After handling messages, returns a promise that will resolve data sent back by the API
   */
  post(type: string, action: string = '', payload: any = {}) {
    let url = this.url(type, action);
    return this.http.post(url, payload, this.getConfig()).toPromise().then((result: any) => {
      return this.handleResult(result, type);
    }, (response: any) => {
      return this.handleError(response.error, type)
    });
  }

  /**
   * http PUT request
   *
   * @param String type API call type, eg. users, courses
   * @param String action API call action, eg get, list
   * @param Number id ID of the {type} resource
   * @param Object payload data to be sent
   *
   * @return Promise After handling messages, returns a promise that will resolve data sent back by the API
   */
  put(type: string, action: string, id: number|null = null, id2: number|null = null) {
    let url = this.url(type, action, id, id2);
    return this.http.put(url, null, this.getConfig()).toPromise().then((result: any) => {
      return this.handleResult(result, type);
    }, (response: any) => {
      return this.handleError(response.error, type)
    });
  }

  /**
   * http DELETE request
   *
   * @param String type API call type, eg. users, courses
   * @param String action API call action, eg get, list
   * @param Number id ID of the {type} resource
   * @param Object payload data to be sent
   *
   * @return Promise After handling messages, returns a promise that will resolve data sent back by the API
   */
  delete(type: string, action: string, id: number|null = null) {
    let url = this.url(type, action, id);
    return this.http.delete(url, this.getConfig()).toPromise().then((result: any) => {
      return this.handleResult(result, type);
    }, (response: any) => {
      return this.handleError(response.error, type)
    });
  }

  /**
   * http GET request and handle file download
   *
   * @param String type API call type, eg. users, courses
   * @param String action API call action, eg get, list
   * @param Number id ID of the {type} resource
   * @param Number Id2 Secondary ID related to the {action}
   *
   * @return Promise Downloads the file and resolves the filename
   */
  // download(type: string, action: string, id: number|null = null, id2: number|null = null) {
  //   let url = this.url(type, action, id, id2);
  //   const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.authToken);
  //   const config = this.getConfig();
  //   return this.http.get(url, { headers: config.headers, observe: 'response', responseType: 'blob' })
  //   .toPromise().then(
  //     (response: any) => {
  //       const contentDispositionHeader = response.headers.get('Content-Disposition');
  //       if (contentDispositionHeader !== null && typeof contentDispositionHeader == 'string') {
  //         // Get filename from the response headers

  //         let fileName = 'download';

  //         const matches = new RegExp('filename="([^"]+)"').exec(contentDispositionHeader);
  //         if (matches && matches.length > 0){
  //           fileName = matches[1];
  //         }

  //         // Download the file
  //         const file = new Blob([response.body]);
  //         saveAs(file, fileName);

  //         return fileName;
  //       } else {
  //         this.messages.error("Unable to download file");
  //         return false;
  //       }
  //     },
  //     (response: any) => {
  //       return this.handleError(response.error, type);
  //     }
  //   );
  // }
}
