<?php
namespace Core;

require_once(CORE_ROOT . '/interfaces/queries/select.php');
require_once(CORE_ROOT . '/interfaces/queries/insert.php');
require_once(CORE_ROOT . '/interfaces/queries/update.php');
require_once(CORE_ROOT . '/interfaces/queries/delete.php');
require_once(CORE_ROOT . '/models/user.model');
require_once(CORE_ROOT . '/error.trait');

use \Core\Database\selectQuery;
use \Core\Database\insertQuery;
use \Core\Database\updateQuery;
use \Core\Database\deleteQuery;
use \Core\Models\User;

trait Common {

  /**
   * Shorthand function to get a config value
   * @param  string $key  Config key
   * @param  string $type Config type
   * @return Mixed        Config value
   */
  protected function configValue($key, $type = 'application')
  {
    $config = new selectQuery()
      ->from('config')
      ->where('type', '=', $type)
      ->and('key', '=', $key)
      ->execute(true);
    if (!$config) {
      $this->error("Config {$key} not found", 404);
    }
    switch($config->value_type) {
      case 'int':
        return intval($config->value);
        break;
      case 'string':
        return strval($config->value);
        break;
      default:
        return $config->value;
        break;
    }
  }

    /**
   * Find the user's authorization token.
   *
   * First check session.
   * Then look in request headers (ie from API calls)
   *
   * @return String $authToken The Authorization Token.
   */
  protected function getAuthToken()
  {
    $authToken = '';
    if(isset($_SESSION['authorization_token'])) {
      return $_SESSION['authorization_token'];
    } else if (isset($_COOKIE['auth'])) {
      $_SESSION['authorization_token'] = $_COOKIE['auth'];
      return $_COOKIE['auth'];
    }
    if (function_exists('apache_request_headers')){
      $headers = \apache_request_headers();
      $authToken = $headers['Authorization'] ?? null;
    }
    if ($authToken){
      $authToken = str_replace('Bearer ', '', $authToken);
      $authToken = trim($authToken);
      $_SESSION['authorization_token'] = $authToken;
      return $authToken;
    }
    return false;
  }

  /**
   * Get the session's current user
   *
   * @return  User
   */
  protected function getCurrentUser()
  {
    if (isset($_SESSION['user'])) {
      $user = $_SESSION['user'];
    } else {
      $user = new User();
      if ($user->byToken()) {
        $_SESSION['user'] = $user;
      } else {
        return false;
      }
    }
    return $user;
  }

  /**
  * Convert kebab case URL to prettier camelCase for functions
  * eg. course-enrollments => courseEnrollments
  */
  public function toCamelCase($string, $capitalizeFirstCharacter = false)
  {
    $str = str_replace('-', ' ', $string);
    $str = ucwords($str);
    $str = str_replace(' ', '', $str);
    if (!$capitalizeFirstCharacter) {
        $str = lcfirst($str);
    }
    return $str;
  }
}
?> 
