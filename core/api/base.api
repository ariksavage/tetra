<?php
/**
 * Basic API
 *
 * Handle general CRUD operations for a particular database table.
 *
 * Will be extended by more specific APIs
 *
 * Or overridden by Application
 *
 * PHP version 8.4
 *
 * @category   API
 * @package    Core
 * @author     Arik Savage <ariksavage@gmail.com>
 * @version    1.0
 * @since      2025-01-10
 */
namespace Core\API;

require_once(CORE_ROOT . '/tetra-core.trait');
require_once(CORE_ROOT . '/interfaces/queries/queries.trait');

class Base {
  use \Core\Common;
  use \Core\Database\Queries;

  /**
   * Default table name.
   * @var String
   */
  protected string $table = '';

  /**
   * Cached data sent via POST request.
   * @var Object
   */

  protected \stdClass|null $_postdata = null;

  /**
   * Classname of the default model
   * @var String
   */
  protected string $model = '';

  /**
   * Label for multiple items
   * @var String
   */
  protected string $plural = 'items';

  /**
   * Label for a single item
   * @var String
   */
  protected string $singular = 'item';

  /**
   * Data object to be returned
   * @var Object
   * Data
   */
  public \stdClass $data;

  /**
   * Text message to be returned
   * @var String
   * Message
   */
  public string $message = '';

  /**
   * Class constructor
   * @param string $table    Table name. eg "users"
   * @param string $model    Fully namespaced class for returned items. eg \Core\Models\User
   * @param string $plural   Plural name for items.                     eg "Users"
   * @param string $singular Singular name for item.                    eg "User"
   */
  public function __construct(string $table = '', string $model = '', string $plural = 'Items', string $singular = 'Item')
  {
    $this->checkAuth();
    $this->data = new \stdClass();
    $this->message = '';
    $this->table = $table;
    $this->model = $model;
    $this->plural = $plural;
    $this->singular = $singular;
  }

  /**
   * Check if authorization is required
   * @return Boolean TRUE if login is required
   */
  public function requiresAuth(): bool
  {
    return true;
  }

  /**
   * If authorization is required, check for an active user
   * @return bool TRUE if authorized
   */
  protected function checkAuth(): bool
  {
    $user = $this->getCurrentUser();
    if ($this->requiresAuth() && !$user) {
      $this->error('Login required', 401);
    } else {
      $user->updateSession();
    }
    return true;
  }

  /**
   * Save posted item to the database.
   *
   * @return JSON response
   */
  public function savePOST()
  {
    $key = strtolower($this->singular);
    $data = $this->postValue($key);
    $model = new $this->model($data);
    $success = $model->save();
    if ($success) {
      $this->success($this->singular, $model, "Successfully saved {$this->singular}.");
    } else {
      $this->error("Could not save {$this->singular}.", $this->plural, $code = 500, $data);
    }
  }

  /**
   * List items belonging to this API's table
   */
  public function listPOST()
  {
    $page = $this->postValue('page', 1, 'integer');
    $per = $this->postValue('per', 20, 'integer');
    $query = $this->listQuery($page, $per);
    $list = $this->paginatedResults($query, $page, $per);
    if (count($list)){
      $this->success($this->plural, $list);
    } else {
      $this->error("No results found", $this->plural, 404);
    }
  }

  /**
   * Delete the item with the given $id.
   *
   * @param  int    $id Item's ID
   * @return [type]     [description]
   */
  public function deleteDELETE(int $id)
  {
    $model = new $this->model();
    $model->byId($id);
    if ($model->delete()) {
      $this->successMsg("Deleted {$this->singular} $id");
    }
  }

  /**
   * Get results from a query, along with pagination information.
   *
   * @param  \Core\Database\selectQuery $query SELECT Query
   * @param  int    $page                      Current page of results to return
   * @param  int    $perPage                   Number of items top return per page
   * @param string $model                      Fully namespaced class for returned items. eg \Core\Models\User
   * @return Array<$model>                     Query results
   */
  protected function paginatedResults(\Core\Database\selectQuery $query, int $page, int $perPage, string $model = '')
  {
    $total = $query->getTotal();
    if (!$model && $this->model) {
      $model = $this->model;
    }
    $results = $query->execute(false, $model);
    $pagination = (object) Array(
      'current_results' => count($results),
      'total_results' => $total
    );
    $pagination->first_page = 1;
    if ($perPage){
      $pagination->per_page  = $perPage;
      $lastPage = ceil($total / $perPage);
      $pagination->last_page = $lastPage;
      $pagination->current_page = $page;
      $pagination->next_page = ($page < $lastPage) ? $page + 1 : null;
      $pagination->prev_page = ($page > 1) ? $page - 1 : null;
    }

    $this->data->pagination = $pagination;
    return $results;
  }

  /**
   * Get an item by its ID
   * @param  int           $id Item ID
   * @return $this->model      Model
   */
  protected function getById(int $id)
  {
    $model = new $this->model();
    $model->byId($id);
    return $model;
  }

  /**
   * HTTP GET request for an item by its ID.
   *
   * @param  int           $id Item ID
   * @return $this->model      Model
   */
  public function idGET($id)
  {
    $model = $this->getById($id);
    $this->success($this->singular, $model);
  }

  /**
   * Get a list of columns to be used for search queries.
   * To be overridden by specific APIs.
   * 
   * @return Array<String> List of column names.
   */
  protected function searchColumns(): Array
  {
    return [];
  }

  /**
   * Build a query to list items.
   * May be expanded by specific APIs
   *
   * @param int $page     Page number of results to return.
   * @param int $per      Number of results per page.
   *
   * @return selectQuery  Query object
   */
  protected function listQuery(int $page = 1, int $per = 20): \Core\Database\selectQuery
  {
    $query = $this->select()->from($this->table);
    $search = $this->postValue('search');
    if ($search){
      $query->andGroup();
      foreach($this->searchColumns() as $k => $column) {
        if ($k > 0) {
          $query->or($column, 'CONTAINS', $search);
        }
      }
      $query->endGroup();
    }
    $query->paginate($page, $per);
    return $query;
  }

  /**
   * Get data from Angular POST request, or from plain $_POST;
   *
   * @return stdClass|null POST data
   */
  protected function getPostData(): \stdClass|null
  {
    if (!$this->_postdata) {
      if ($_POST) {
        $this->_postdata = (object) $_POST;
      } else {

        $rawdata = file_get_contents("php://input");
        $this->_postdata = json_decode($rawdata);
      }
    }
    return $this->_postdata;
  }

  /**
   * Get a value from $postdata
   * 
   * @param String $key Object key to be retrieved
   * 
   * @return Mixed Postdata value
   */
  protected function postValue($key, $default = '', $type = 'string')
  {
    // Get postdata either from Angular or from $_POST;

    $postdata = $this->getPostData();
    $value = $default;
    if (isset($postdata->$key)) {
      $value = $postdata->$key;
    }

    switch($type) {
      case 'integer':
        $value = intval($value);
        break;
      case 'float':
        $value = floatval($value);
        break;
      case 'boolean':
        $value = !!$value;
        break;
      case 'string':
      default:
        break;
    }

    return $value;
  }

  /**
   * Set a parameter of the API's data.
   * 
   * @param String $key  Data key to be set.
   * @param Mixed  $data Data to be set to the value of $key.
   * 
   * @return $this.
   */
  public function addData($key = '', $data = null)
  {
    if ($key){
      $key = strtolower($key);
      $this->data->$key = $data;
    }
    return $this;
  }

  /**
   * End the API interaction as successful.
   * 
   * @param String $key     Data key to be set.
   * @param Mixed  $data    Data to be set to the value of $key.
   * @param String $message User facing success message.
   * 
   * @return JSON.
   */
  public function success($key = '', $data = null, $message = '')
  {
    if ($data) {
      if ($key) {
        $key = strtolower($key);
        $this->addData($key, $data);
      } else {
        $this->data = $data;
      }
    }
    $this->message = $message;
    header('Content-Type: application/json; charset=utf-8');
    die(json_encode($this));
  }

  /**
   * End the API interaction with a success message, and no data.
   * 
   * @param String $message User facing success message.
   * 
   * @return JSON.
   */
  public function successMsg($message)
  {
    return $this->success('', null, $message);
  }
}
?>
