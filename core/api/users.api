<?php

namespace Core\API;


use Models\User;

class Users extends Base {

  public function __construct()
  {
    parent::__construct('users', '\Core\Models\User', 'Users', 'User');
  }

    public function requiresAuth(): bool
  {
    return FALSE;
  }

  /**
   * Get a list of columns to be used for search queries.
   * To be overridden by specific APIs.
   *
   * @return Array<String> List of column names.
   */
  protected function searchColumns(): Array
  {
    return ['username', 'first_name', 'last_name', 'middle_name', 'email'];
  }

  /**
   * Build a query to list users.
   *
   * @param int $page     Page number of results to return.
   * @param int $per      Number of results per page.
   *
   * @return selectQuery  Query object
   */
  protected function listQuery(int $page = 1, int $per = 20): \Core\Database\selectQuery
  {
    $query = parent::listQuery($page, $per);
    // update query here
    return $query;
  }

  /**
   * Assign roles to the given user.
   *
   * Any roles not included in the request will be removed.
   * @param  [type] $userId [description]
   * @return [type]         [description]
   */
  public function rolesPUT($userId)
  {
    $this->requirePermission('user_roles', 'UPDATE');
    $user = $this->getById($userId);
    $roles = $this->postValue('roles');

    $success = $user->updateRoles($roles);
    if ($success) {
      $this->successMsg("User ({$userId}) roles successfully updated");
    }
  }

  public function currentGET()
  {
    $this->requirePermission('users', 'VIEW OWN');
    if ($currentUser = $this->getCurrentUser()) {
      $currentUser->getRoles();
      $this->success('user', $currentUser);
    }
  }

  public function logoutGET()
  {
    $currentUser = $this->getCurrentUser();
    if ($currentUser->logout()) {
      $this->successMsg("Successfully logged out.");
    }
  }

  /**
   * Get a password reset link for the given user.
   * @param  int    $userId [description]
   * @return [type]         [description]
   */
  public function passwordResetLinkGET(int $userId)
  {
    $user = $this->getById($userId);
    $host = $this->getValue('host');

    $link = $user->passwordResetLink($host);
    $this->success('password-reset', $link);
  }

  /**
   * Email a user with a password reset link.
   * @param  int    $userId [description]
   * @return [type]         [description]
   */
  public function passwordResetGET()
  {

    $username = $this->getValue('username');
    $user = $this->select()->from('users')
    ->where('username', '=', $username)
    ->execute(TRUE, '\Core\Models\User');
    if ($user){
      $appName = $this->configValue('name');
      $supportEmail = $this->configValue('support_email');
      $host = $this->getValue('host');
      if (!$host){
        $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? "https" : "http";
        $host = $protocol . "://" . $_SERVER['HTTP_HOST'];
      }
      $resetLink = $user->passwordResetLink($host);
      $subject = "Password reset for " . $appName;
      $message = '
          <h2>Password Reset Request</h2>
          <p>Hello ' . $user->name() . ',</p>
          <p>You recently requested to reset your password for your <strong>'.$appName.'</strong> account.</p>
          <p><a href="' . $resetLink . '">Reset your password</a></p>
          <p>If you did not request a password reset, please ignore this email or <a href="mailto:' . $supportEmail . '?subject=password%20reset%20request">contact support</a> if you have questions.</p>
      ';
      if (!$user->message($subject, $message)){
        $this->error("Password reset could not be sent");
      }
    }
    // Sends success message regardless of whether user exists, to prevent brute force guessing usernames
    $this->success('message', 'A password reset link has been sent to your email address.');
  }

    /**
   * Saves a user to the database.
   *
   * Overrides base to allow a user to update their own profile
   *
   * @return JSON response
   */
  public function savePOST()
  {
    $key = strtolower($this->singular);
    $data = $this->postValue($key);
    $model = new $this->model($data);
    if ($model->isCurrentUser()) {
      $this->reqPermission('UPDATE OWN');
    } else {
      $this->reqPermission('UPDATE');
    }
    $success = $model->save();
    if ($success) {
      $this->success($this->singular, $model, "Successfully saved {$this->singular}.");
    } else {
      $this->error("Could not save {$this->singular}.", $this->plural, $code = 500, $data);
    }
  }
}
?>
