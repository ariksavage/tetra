<?php
/**
 * User model
 *
 * Includes user login, password reset, and permissions logic
 *
 * PHP version 8.4
 *
 *
 * @category   Model
 * @package    Core
 * @author     Arik Savage <ariksavage@gmail.com>
 * @version    1.0
 * @since      2025-01-05
 */

namespace Core\Models;

class User extends Base {

  /**
   * Username
   * @var String
   */
  public string $username = '';

  /**
   * Name prefix eg. "Ms.", "Dr.", "Mr."
   * @var String
   */
  public string $name_prefix = '';

  /**
   * First Name
   * @var String
   */
  public string $first_name = '';

  /**
   * Middle Name
   * @var String
   */
  public string $middle_name = '';

  /**
   * Last Name
   * @var String
   */
  public string $last_name = '';

  /**
   * Name Suffix eg. "jr.", "OBE"
   * @var String
   */
  public string $name_suffix = '';

  /**
   * Email address
   * @var String
   */
  public string $email = '';

  /**
   * Password
   * @var String
   */
  protected string $password = '';

  /**
   * Roles
   */
  public array $roles = [];

  public array $user_groups = [];

  protected int $category_id = 0;
  public ?object $category;


  /**
   * Construct the user
   *
   * @param string      $label Singular name for this item, eg "User"
   * @param string      $table Database table where this item is stored, eg "users"
   * @param object|null $data  Data to be mapped onto this item
   * @param array       $flags Additional parameters.
   *
   * @return            $this
   */
  public function __construct(object|null $data = NULL, array $flags = [])
  {

    parent::__construct('User', 'users', $data, $flags);
    return $this;
  }

  /**
   * Get additional related data based on provided flags
   * @param  array  $flags [description]
   * @return [type]        [description]
   */
  protected function postLoad(array $flags = [])
  {
    if (in_array('WITH_TAGS', $flags)) {
      $this->getTags();
    }
    if (in_array('WITH_GROUPS', $flags)) {
      $this->getGroups();
    }
    if (in_array('WITH_CATEGORY', $flags)) {
      $this->getCategory();
    }
    if (in_array('WITH_ROLES', $flags)) {
      $this->getRoles();
    }
    return $this;
  }

  public function getGroups()
  {
    $this->user_groups = $this->select(['`groups`.*'])->from('groups')
      ->leftJoin('user_group_assignments', 'id', 'group_id')
      ->where('`user_group_assignments`.`user_id`', '=', $this->id)
      ->execute();
  }

  public function getCategory()
  {
    $query = $this->select()->from('user_categories')
    ->where('id', '=', $this->category_id);
    $category =  $query->execute(TRUE);
    if ($category) {
      $this->category = $category;
    }
  }


  /**
   * Convert the model to an array for use in a query.
   *
   * And apply any other necessary business logic
   * before saving
   *
   * - Ensure the user's password is hashed, if provided.
   *
   * @return array
   */
  public function prepareSave()
  {
    $data = parent::prepareSave();
    if ($this->password) {
      if (strlen($this->password) == 60) { // password is hashed
        $data['password'] = $this->password;
      } else {
        $data['password'] = $this->passwordHash($this->password);
      }
    }
    if (!$this->id && !isset($data['password'])) {
      $data['password'] = $this->generateAuthToken();
    }

    // Roles are added / removed in their oewn separate process
    unset($data['roles']);
    unset($data['category']);
    unset($data['user_groups']);
    return $data;
  }

  /**
   * Operations to be conducted after the model is saved.
   *
   * By default: refresh this model to acurately reflect the database.
   *
   * @return $this
   */
  protected function postSave()
  {
    $this->getRoles();

    if (count($this->roles) == 0) {
      $roles = $this->select()->from('user_roles')->where('default', '=', '1')->execute(FALSE);
      foreach ($roles as $role) {
        $this->addRole($role->id);
      }
    }
    $this->getRoles();
    return parent::postSave();
  }

  /**
   * Post-delete cleanup.
   *
   * eg. Delete items from related tables
   *
   * @return $this
   */
  public function postDelete()
  {
    if ($this->deleteQuery('user_role_assignments')->where('user_id', '=', $this->id)->execute()) {
      return parent::postDelete();
    }
  }


  /**
   * Get the user's full name as a single string:
   *
   * {prefix} {First} {Middle} {Last} {suffix}
   *
   * ignoring any missing segments
   *
   * @return String Full name
   */
  public function name()
  {
    $names = array();
    $names[] = $this->name_prefix;
    $names[] = $this->first_name;
    $names[] = $this->middle_name;
    $names[] = $this->last_name;
    $names = array_filter($names);
    $name = join(' ', $names);
    if ($this->name_suffix) {
      $name .= ', ' . $this->name_suffix;
    }
    return $name;
  }

  /**
   * Validate username and password.
   * if everything matches:
   * Start a new session for the user.
   *
   * @param String $username Username
   * @param String $password Password
   *
   * @return Boolean Login success
   */
  public function login(string $username, string $password)
  {
    $this->byUsername($username);
    if ($this->testPassword($password)) {
      $expiresDays = $this->configValue('session_expires_days');
      return $this->startSession($expiresDays);
    } else {
      $this->error("Access Denied.", 401, "Login");
    }
  }

  /**
   * End the current user's session.
   *
   * @return Boolean Success.
   */
  public function logout()
  {
    $_SESSION['authorization_token'] = NULL;
    $_SESSION['user'] = NULL;
    return $this->endSession();
  }

  /**
   * Start a new session and generate a link to
   * allow a user to reset their password.
   *
   * @var String $host  Base URL of the request.
   *
   * @return String     Reset Link
   */
  public function passwordResetLink(string $host)
  {
    // end any open sessions
    $now = date('Y-m-d h:i:s');
    $this->update(['date_ended' => $now], 'user_sessions')
    ->where('user_id', '=', $this->id)
    ->and('date_ended', 'IS NULL')
    ->execute();
    // start a new reset session
    $expiresDays = $this->configValue('password_reset_expires_days');
    $token = $this->startSession($expiresDays);
    $link = "{$host}/password-reset/{$token}";
    return $link;
  }

  /**
   * Get user by the current authorization token
   *
   * @return User
   */
  public function byToken()
  {
    $token = $this->getAuthToken();
    $now = date('Y-m-d h:i:s');
    if (!$token) {
      return FALSE;
    }
    $session_query = $this->select(['user_id'], 'user_sessions')
      ->where('token', '=', $token)
      ->and('date_expires', '>', $now)
      ->and('date_ended', 'IS NULL');
    if ($session = $session_query->execute(TRUE)) {
      $q = $this->select()
        ->where('id', '=', $session->user_id);
      if ($data = $q->execute(TRUE)) {
        $this->mapData($data);
        return TRUE;
      } else {
        return FALSE;
      }
    } else {
      return FALSE;
    }
  }

  /**
   * Get a user by their username.
   * @param String $username Username
   *
   * @return User.
   */
  public function byUsername(string $username)
  {
    $q = $this->select()
      ->where('username', '=', $username);
    $data = $q->execute(TRUE);
    if ($data) {
      $this->mapData($data);
      return $this;
    } else {
      $this->error("{$username} not found", 404, "User not found");
    }
  }

  /**
   * Test password hash against the password that is provided.
   *
   * Note that password_hash() returns the algorithm,
   * cost and salt as part of the returned hash.
   *
   * Therefore, all information that's needed to verify the hash is included in it.
   * This allows the verify function to verify the hash without needing separate
   * storage for the salt or algorithm information.
   *
   * @param String $password   Un-encrypted password
   *
   * @return Boolean           Password verified
   */
  public function testPassword(string $password)
  {
    $passwordHash = $this->password;
    if (!$passwordHash) {
      return FALSE;
    }
    return password_verify($password, $passwordHash);
  }

  /**
   * Create a hash of the user's password.
   * In this case, we want to increase the default cost for BCRYPT to 12.
   * Note BCRYPT will always be 60 characters.
   *
   * @param String $password   Un-encrypted password
   *
   * @return String            Encrypted password
   */
  protected function passwordHash(string $password)
  {
    $options = [
        'cost' => 12,
    ];
    return password_hash($password, PASSWORD_BCRYPT, $options);
  }

  /**
   * Create a random auth token from the username and current timestamp
   */
  private function generateAuthToken()
  {
    $token = md5($this->username . date('Y-m-d-h-i-s'));
    $_SESSION['authorization_token'] = $token;
    return $token;
  }

  /**
   * Start a new session in the user_sessions table
   * with a new auth token.
   *
   * @return String  Authorization token
   */
  protected function startSession($expiresDays)
  {
    $token = $this->generateAuthToken();
    $data = array();
    $data['user_id'] = $this->id;
    $data['token'] = $token;
    $data['date_started'] = date('Y-m-d h:i:s');
    $data['date_last_access'] = $data['date_started'];
    $data['date_expires'] = date('Y-m-d h:i:s', strtotime("+{$expiresDays} days"));
    // die( $this->insert($data, 'user_sessions') );
    if ($this->insert($data, 'user_sessions')->execute()) {
      $_SESSION['authorization_token'] = $token;
      $_SESSION['user'] = $this;
      return $token;
    } else {
      return FALSE;
    }
  }

  /**
   * Keep the current session alive
   * by updating its last_active value
   *
   * @param String $token  Authorization token matching a session for this user.
   *
   * @return Boolean       Success.
   */
  public function updateSession(string $token = '')
  {
    $token = $this->getAuthToken();
    $data = array();
    $now = date('Y-m-d h:i:s');
    $data['date_last_access'] = $now; // updated by the table itself
    $expiresDays = $this->configValue('session_expires_days');
    $data['date_expires'] = date('Y-m-d h:i:s', strtotime("+{$expiresDays} days"));
    if ($this->update($data, 'user_sessions')->where('token', '=', $token)->and('user_id', '=', $this->id)->execute()) {
      $this->cleanupSessions();
      return TRUE;
    }
  }

  /**
   * End the current session
   * add the date_ended value to user_sessions
   *
   * @return Boolean  Success
   */
  protected function endSession()
  {
    $token = $this->getAuthToken();
    $data = array();
    $data['date_ended'] = date('Y-m-d h:i:s');
    return $this->update($data, 'user_sessions')
      ->where('token', '=', $token)
      ->and('user_id', '=', $this->id)
      ->and('date_ended', 'IS NULL')
      ->execute();
  }

  /**
   * End any outstanding sessions
   *
   * @return Boolean  Success
   */
  protected function cleanupSessions()
  {
    $now = date('Y-m-d h:i:s');
    $data = array('date_ended' => $now);
      return $this->update($data, 'user_sessions')
      ->where('user_id', '=', $this->id)
      ->and('date_expires', '<', $now)
      ->and('date_ended', 'IS NULL')
      ->execute();
  }

  /**
   * Get all roles assigned to this user.
   *
   * @return void Roles are assigned to the Roles property.
   */
  public function getRoles()
  {
    $this->roles = array();
    require_once(__dir__ . '/user_role.model');
    $roles = $this->select(['user_roles.*'])
      ->from('user_role_assignments')
      ->leftJoin('user_roles', 'role_id', 'id')
      ->where('user_role_assignments.user_id', '=', $this->id)
      ->execute(FALSE, '\Core\Models\UserRole');
    foreach ($roles as $role) {
      $this->roles[$role->key] = $role;
    }
  }

  /**
   * Update user role assignments for this user.
   *
   * Adds any roles that are not already assigned
   *
   * Removes any roles not included in $roles here.
   *
   * @param  array  $roles array of role IDs
   * @return bool          TRUE if successful.
   */
  public function updateRoles(array $roles): bool
  {
    $existing_roles_query = $this->select()->from('user_role_assignments')->where('user_id', '=', $this->id);
    $existing = $existing_roles_query->execute();
    $existing_roles = array_map( function ($item) {
      return intval($item->role_id);
    }, $existing);

    // Add un-assigned roles
    $add_roles = array_diff($roles, $existing_roles);
    $success = TRUE;
    if ($success && count($add_roles)) {
      foreach ($add_roles as $roleId) {
        if (!$this->addRole($roleId)) {
          $success = FALSE;
          $this->error("Could not assign role ({$role}) to user ({$this->id})");
          break;
        }
      }
    }

    // Remove roles not included in the function's parameters.
    $remove_roles = array_diff($existing_roles, $roles);
    if ($success && count($remove_roles)) {
      foreach ($remove_roles as $roleId) {
        if (!$this->removeRole($roleId)) {
          $success = FALSE;
          $this->error("Could not assign role ({$roleId}) to user ({$this->id})");
        }
      }
    }
    return $success;
  }

  /**
   * Assign a role to this user.
   * @param int $roleId Role ID
   *
   * @return bool       Success
   */
  protected function addRole(int $roleId): bool
  {
    $success = TRUE;
    $data = ['user_id' => $this->id, 'role_id' => $roleId];
    if (!$this->insert($data, 'user_role_assignments')->execute()) {
      $success = FALSE;
      $this->error("Could not assign role ({$roleId}) to user ({$this->id})");
    }
    return $success;
  }

  /**
   * Remove a role from this user.
   * @param int $roleId Role ID
   *
   * @return bool       Success
   */
  protected function removeRole(int $roleId): bool
  {
    $success = TRUE;
    $delete_role_query = $this->deleteQuery('user_role_assignments')
      ->where('user_id', '=', $this->id)
      ->and('role_id', '=', $roleId);
    if (!$delete_role_query->execute()) {
      $success = FALSE;
      $this->error("Could not assign role ({$roleId}) to user ({$this->id})");
    }
    return $success;
  }

  /**
   * Check all roles for the given permission.
   * @param  string  $dimension Permission dimension
   * @param  string  $action    Permission action (VIEW, UPDATE, DELETE, etc)
   * @return bool               TRUE if permission is found.
   */
  public function hasPermission(string $dimension, string $action = ''): bool
  {
    $this->getRoles();
    foreach ($this->roles as $role) {
      if ($role->hasPermission($dimension, $action)) {
        return TRUE;
      }
    }
    return FALSE;
  }

  /**
   * Test whether or not this user is the user currently performing actions.
   *
   * @return True if this is the user that is in this session
   */
  public function isCurrentUser(): bool
  {
    $current = $this->getCurrentUser();
    return (isset($this->id) && $this->id && $this->id === $current->id);
  }
}
