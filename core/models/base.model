<?php
/**
 * Base model class
 *
 * Represents an object that can be READ, UPDATED, DELETED
 *
 * PHP version 8.4
 *
 *
 * @category   Model
 * @package    Core
 * @author     Arik Savage <ariksavage@gmail.com>
 * @version    1.0
 * @since      2025-01-05
 */

namespace Core\Models;

/**
 * Base model class.
 */
class Base {
  use \Core\Common;
  use \Core\Error;
  use \Core\Database\Queries;

  /**
   * Database table
   * @var String
   */
  protected string $table = '';

  /**
   * Singular item label
   * for use in messages / errors
   * @var String
   */
  protected string $itemLabel = '';

  /**
   * Item ID
   * @var Integer
   */
  public int $id = 0;

  /**
   * Date Created
   * @var Date
   */
  public int $date_created = 0;

  /**
   * User ID of creator
   * @var Integer
   */
  public int $created_by = 0;

  /**
   * Date Modified
   * @var Date
   */
  public int $date_modified = 0;

  /**
   * ID of last user to modify this item
   * @var Integer
   */
  public int $modified_by = 0;

  /**
   * Construct the model
   *
   * @param string      itemLabel Singular name for this item, eg "User"
   * @param string      $table    Database table where this item is stored, eg "users"
   * @param object|null $data     Data to be mapped onto this item
   * @param array       $flags    Additional parameters.
   *
   * @return            $this
   */
  public function __construct(
      string $itemLabel,
      string $table,
      object|null $data = NULL,
      array $flags = []
  ) {
    $this->table = $table;
    $this->itemLabel = $itemLabel;
    $schema = $this->describeTable();
    if ($data) {
      if (isset($data->id)) {
        $this->byId($data->id);
      }
      $this->mapData($data);
    }
    return $this;
  }

  /**
   * Query the database for an item by its ID
   * @param  int    $id Item ID
   * @return object     Database row as an object
   */
  protected function getDataById(int $id)
  {
    $data = $this->select()
      ->where('id', '=', $id)
      ->execute(TRUE);
    if (!$data) {
      $this->error("{$this->itemLabel} {$id} Not Found", 404, "{$this->itemLabel} Not Found");
    }
    return $data;
  }

  /**
   * Populate this object by using its ID to fetch data
   *
   * @param Integer $id Item's database ID.
   *
   * @return $this
   */
  public function byId(int $id)
  {
    if ($data = $this->getDataById($id)) {
      $this->mapData($data);
      return $this;
    }
  }

  /**
   * Take data from the database, or POST
   * and map it to the model.
   *
   * @param object $data Data to map.
   *
   * @return $this.
   */
  protected function mapData(object $data)
  {
    foreach ($data as $prop => $value) {
      if (property_exists($this, $prop)) {
        switch (gettype($this->$prop)) {
          case "boolean":
            $this->$prop = !!$value;
            break;
          case "integer":
            if (stristr($prop, 'date') && $value) {
              $this->$prop = strtotime($value);
            } else {
              $this->$prop = intval($value);
            }
            break;
          case "double": // (for historical reasons "double" is returned in case of a float, and not simply "float")
            $this->$prop = floatval($value);
            break;
          case "string":
            $this->$prop = strval($value);
            break;
          case "array":
          case "object":
            $this->$prop = json_decode($value);
            break;
          default:
            echo "$prop => $value";
            die("unhandled type: " . gettype($this->$prop));
            break;
        }
      }
    }
    return $this;
  }

  /**
   * Reload this object by getting data from the database
   */
  public function refresh()
  {
    $this->byId($this->id);
    return $this;
  }

  /**
   * Convert the model to an array for use in a query.
   *
   * Apply any other necessary business logic before saving
   *
   * @return Array
   */
  public function prepareSave()
  {
    $currentUser = $this->getCurrentUser();
    $this->modified_by = intval($currentUser->id);
    $data = $this->toArray();
    unset($data['date_created']);
    unset($data['date_modified']);
    unset($data['id']);
    foreach ($data as $prop => $value) {
      if (property_exists($this, $prop)) {
        switch (gettype($this->$prop)) {
          case "boolean":
            // $this->$prop = !!$value;
            $data[$prop] = $value ? 1 : 0;
            break;
          case "integer":
          case "double":
          case "string":
            if ($value){
              $data[$prop] = $value;
            } else {
              $data[$prop] = NULL;
            }
            break;
          case "array":
          case "object":
            if (!is_string($value)){
              $data[$prop] = json_encode($value);
            }
            break;
          default:
            echo "$prop => $value";
            die("unhandled type: " . gettype($this->$prop));
            break;
        }
      }
    }
    if (!isset($data['created_by']) || !$data['created_by'] ) {
      !$data['created_by'] = 0;
    }
    return $data;
  }

  /**
   * Save the current model to the database.
   */
  public function save()
  {
    $currentUser = $this->getCurrentUser();
    $this->modified_by = intval($currentUser->id);

    if (!isset($this->id) || !$this->id) { // This has an ID, update it.
      $this->created_by = intval($currentUser->id);
      $data = $this->prepareSave();
      $this->id = $this->insert($data)->execute();
    } else { // NO ID, create new.
      $data = $this->prepareSave();

      $original = (array) $this->getDataById($this->id);
      $diff = array_diff($data, $original);
      if ($diff) {
        $this->update($diff)->where('id', '=', $this->id)->execute();
      }
    }
    return $this->postSave();
  }

  /**
   * Operations to be conducted after the model is saved.
   *
   * By default: refresh this model to acurately reflect the database.
   *
   * @return $this
   */
  protected function postSave()
  {
    $this->refresh();
    return $this;
  }

  /**
   * Delete this item from the database
   *
   * @return Boolean
   */
  public function delete()
  {
    if ($this->deleteQuery($this->table, $this->id)->execute()) {
      return $this->postDelete();
    }
  }

  /**
   * Post-delete cleanup.
   *
   * eg. Delete items from related tables
   *
   * @return $this
   */
  public function postDelete()
  {
    return $this;
  }

  protected function getAssetURI(string $field, bool $deleteOrphan = false)
  {
    $assetId = $this->$field;
    if ($assetId) {
      $asset = $this->select()->from('assets')->where('id', '=', $assetId)->execute(true);
      if ($asset && $asset->uri && is_file($asset->uri)){
        return $asset->uri;
      } else if ($deleteOrphan) {
        $this->$field = 0;
        $this->update([$field => 0])->execute();
        $this->$field = 0;
      }
    }
    return '';
  }

  /**
   * Return JSON to debug
   *
   * @param $label
   */
  protected function debug($label, $data)
  {
    echo $label . PHP_EOL;
    header('Content-Type: application/json; charset=utf-8');
    die(json_encode($data));
  }

  /**
   * Convert the model to a JSON String.
   */
  public function toString()
  {
    $json = json_encode($this);
    return $json;
  }

  /**
   * Convert the model to a simplified object
   */
  public function toObject()
  {
    $json = $this->toString();
    $object = json_decode($json);
    return $object;
  }

  /**
   * Convert the model to a simplified array.
   */
  public function toArray()
  {
    $object = $this->toObject();
    $array = (array) $object;
    return $array;
  }
}
