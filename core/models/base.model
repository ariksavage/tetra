<?php
/**
 * Base model class
 *
 * Represents an object that can be READ, UPDATED, DELETED
 *
 * PHP version 8.4
 *
 *
 * @category   Model
 * @package    Core
 * @author     Arik Savage <ariksavage@gmail.com>
 * @version    1.0
 * @since      2025-01-05
 */

namespace Core\Models;

require_once(CORE_ROOT . '/interfaces/queries/queries.trait');
require_once(CORE_ROOT . '/tetra-core.trait');

/**
 * Base model class.
 */
class Base {
  use \Core\Common;
  use \Core\Database\Queries;

  /**
   * Database table
   * @var String
   */
  protected string $table;

  /**
   * Singular item label
   * for use in messages / errors
   * @var String
   */
  protected string $itemLabel;

  /**
   * Item ID
   * @var Integer
   */
  public int $id;

  /**
   * Date Created
   * @var Date
   */
  public int $date_created;

  /**
   * User ID of creator
   * @var Integer
   */
  public int $created_by;

  /**
   * Date Modified
   * @var Date
   */
  public int $date_modified;

  /**
   * ID of last user to modify this item
   * @var Integer
   */
  public int $modified_by;

  /**
   * Construct the model
   *
   * @param string      itemLabel Singular name for this item, eg "User"
   * @param string      $table    Database table where this item is stored, eg "users"
   * @param object|null $data     Data to be mapped onto this item
   * @param array       $flags    Additional parameters.
   *
   * @return            $this
   */
  public function __construct(string $itemLabel, string $table, object|null $data = null, array $flags = [])
  {
    $this->table = $table;
    $this->itemLabel = $itemLabel;
    $schema = $this->describeTable();
    if ($data) {
      if (isset($data->id)){
        $this->byId($data->id);
      }
      $this->mapData($data);
    }
    return $this;
  }

  /**
   * Query the database for an item by its ID
   * @param  int    $id Item ID
   * @return object     Database row as an object
   */
  protected function getDataById(int $id)
  {
    $data = $this->select()
      ->where('id', '=', $id)
      ->execute(true);
    if (!$data) {
      $this->error("{$this->itemLabel} {$id} Not Found", 404, "{$this->label} Not Found");
    }
    return $data;
  }

  /**
   * Populate this object by using its ID to fetch data
   *
   * @param Integer $id Item's database ID.
   *
   * @return $this
   */
  public function byId(int $id)
  {
    if ($data = $this->getDataById($id)) {
      $this->mapData($data);
      return $this;
    }
  }

  /**
   * Take data from the database, or POST
   * and map it to the model.
   *
   * @param object $data Data to map.
   *
   * @return $this.
   */
  protected function mapData(object $data)
  {
    $schema = $this->describeTable();
    foreach($data as $prop => $value) {
      if (property_exists($this, $prop)) {
        $column = $schema->columns[$prop];
        switch($column->type) {
          case 'tinyint':
          case 'boolean':
          case 'bool':
            $this->$prop = !!$value;
            break;
          case 'int':
          case 'bigint':
            $this->$prop = intval($value);
            break;
          case 'float':
          case 'double':
          case 'doubleprecision':
          case 'real':
          case 'decimal':
            $this->$prop = float($value);
            break;
          case 'timestamp':
            $this->$prop = strtotime($value);
            break;
          case 'varchar':
          case 'char':
          case 'text':
          case 'tinytext':
          case 'mediumtext':
          case 'longtext':
          case 'enum':
            $this->$prop = strval($value);
            break;
          case 'blob':
          case 'longblob':
            if ($value && json_decode($value)) {
              $this->$prop = json_decode($value);
            } else {
              $this->$prop = strval($value);
            }
            break;
          default:
            $this->prop = $value;
        }
      }
    }
    return $this;
  }

  /**
   * Reload this object by getting data from the database
   */
  public function refresh()
  {
    $this->byId($this->id);
    return $this;
  }

  /**
   * Convert the model to an array for use in a query.
   *
   * Apply any other necessary business logic before saving
   *
   * @return Array
   */
  public function prepareSave() {
    $currentUser = $this->getCurrentUser();
    $this->modified_by = intval($currentUser->id);
    $data = $this->toArray();
    unset($data['date_created']);
    unset($data['date_modified']);
    unset($data['id']);
    return $data;
  }

  /**
   * Save the current model to the database.
   */
  public function save()
  {
    $currentUser = $this->getCurrentUser();
    $this->modified_by = intval($currentUser->id);

    if (!isset($this->id) || !$this->id) { // This has an ID, update it.
      $this->created_by = intval($currentUser->id);
      $data = $this->prepareSave();
      $this->id = $this->insert($data)->execute();
    } else { // NO ID, create new.
      $data = $this->prepareSave();
      $original = (array) $this->getDataById($this->id);
      $diff = array_diff($data, $original);
      $this->update($diff)->where('id', '=', $this->id)->execute();
    }

    $this->refresh();
    return $this;
  }

  /**
   * Delete this item from the database
   *
   * @return Boolean
   */
  public function delete()
  {
    return $this->deleteQuery($this->table, $this->id)->execute();
  }

  /**
   * Return JSON to debug
   *
   * @param $label
   */
  protected function debug($label, $data)
  {
    echo $label . PHP_EOL;
    header('Content-Type: application/json; charset=utf-8');
    die(json_encode($data));
  }

  /**
   * Convert the model to a JSON String.
   */
  public function toString()
  {
    $json = json_encode($this);
    return $json;
  }

  /**
   * Convert the model to a simplified object
   */
  public function toObject()
  {
    $json = $this->toString();
    $object = json_decode($json);
    return $object;
  }

  /**
   * Convert the model to a simplified array.
   */
  public function toArray()
  {
    $object = $this->toObject();
    $array = (array) $object;
    return $array;
  }
}
