<?php
namespace Core;

require_once(CORE_ROOT . '/interfaces/queries/select.php');
require_once(CORE_ROOT . '/interfaces/queries/insert.php');
require_once(CORE_ROOT . '/interfaces/queries/update.php');
require_once(CORE_ROOT . '/interfaces/queries/delete.php');
require_once(CORE_ROOT . '/models/user.model');

use \Core\Database\selectQuery;
use \Core\Database\insertQuery;
use \Core\Database\updateQuery;
use \Core\Database\deleteQuery;
use \Core\Models\User;

trait Common {
  /**
   * Shorthand function to get a config value
   * @param  string $key  Config key
   * @param  string $type Config type
   * @return Mixed        Config value
   */
  protected function configValue($key, $type = 'application')
  {
    $config = new selectQuery('value')
      ->from('config')
      ->where('type', '=', $type)
      ->and('key', '=', $key)
      ->execute(true);
    if (!$config) {
      $this->error("Config {$key} not found", 404);
    }
    return $config->value;
  }

    /**
   * Find the user's authorization token.
   *
   * First check session.
   * Then look in request headers (ie from API calls)
   *
   * @return String $authToken The Authorization Token.
   */
  protected function getAuthToken()
  {
    $authToken = '';
    if(isset($_SESSION['authorization_token'])) {
      return $_SESSION['authorization_token'];
    } else if (isset($_COOKIE['auth'])) {
      $_SESSION['authorization_token'] = $_COOKIE['auth'];
      return $_COOKIE['auth'];
    }
    if (function_exists('apache_request_headers')){
      $headers = \apache_request_headers();
      $authToken = $headers['Authorization'] ?? null;
    }
    if ($authToken){
      $authToken = str_replace('Bearer ', '', $authToken);
      $authToken = trim($authToken);
      $_SESSION['authorization_token'] = $authToken;
      return $authToken;
    }
    return false;
  }

  /**
   * Get the session's current user
   *
   * @return  User
   */
  protected function getCurrentUser()
  {
    if (isset($_SESSION['user'])) {
      $user = $_SESSION['user'];
    } else {
      $user = new User();
      if ($user->byToken()) {
        $_SESSION['user'] = $user;
      } else {
        return false;
      }
    }
    return $user;
  }

  /**
   * Kill the current script, and return as much useful JSON data as possible
   *
   * @param String $message Error text.
   * @param Integer $code Error code, header to be returned.
   * @param String $type Category of error for reporting.
   * @param Object $data Additional data to be included in the response.
   *
   * @return Void Print error response.
   */
  public function error($message, $code = 500, $type = null, $data = null)
  {
    $error = new \stdClass();
    $error->message = $message;
    $error->code = $code;
    $error->type = $type;
    if ($data) {
      $error->data = $data;
    }
    if ($error->type == null) {
      switch($code) {
        case 401:
          $error->type = 'Not Authorized';
          break;
        case 404:
          $error->type = 'Not Found';
          break;
        default:
          $error->type = \get_class($this);
          break;
      }
    }
    $e = new \Exception();
    $error->stack = explode("\n", $e->getTraceAsString());
    array_shift($error->stack);

    if (php_sapi_name() === 'cli') { // Command line response
      echo PHP_EOL . "{$error->code} ERROR {$error->type}" . PHP_EOL . $error->message . PHP_EOL;
    } else { // HTTP response
      http_response_code(intval($error->code));
      header('Content-Type: application/json');
      die(json_encode($error));
    }
  }

  /**
  * Convert kebab case URL to prettier camelCase for functions
  * eg. course-enrollments => courseEnrollments
  */
  public function toCamelCase($string, $capitalizeFirstCharacter = false)
  {
    $str = str_replace('-', ' ', $string);
    $str = ucwords($str);
    $str = str_replace(' ', '', $str);
    if (!$capitalizeFirstCharacter) {
        $str = lcfirst($str);
    }
    return $str;
  }
}
?> 
